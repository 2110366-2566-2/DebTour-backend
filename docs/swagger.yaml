definitions:
  models.ActivityRequest:
    properties:
      description:
        type: string
      endTimestamp:
        type: string
      location:
        $ref: "#/definitions/models.LocationRequest"
      name:
        type: string
      startTimestamp:
        type: string
    type: object
  models.ActivityResponse:
    properties:
      activityId:
        type: integer
      description:
        type: string
      endTimestamp:
        type: string
      location:
        $ref: "#/definitions/models.Location"
      name:
        type: string
      startTimestamp:
        type: string
    type: object
  models.JoinTourRequest:
    properties:
      joinedMembers:
        items:
          properties:
            age:
              type: integer
            firstName:
              type: string
            lastName:
              type: string
          type: object
        type: array
      tourId:
        type: integer
      touristUsername:
        type: string
    type: object
  models.JoinedMembers:
    properties:
      age:
        type: integer
      firstName:
        type: string
      lastName:
        type: string
    type: object
  models.Joining:
    properties:
      memberAge:
        type: integer
      memberFirstName:
        type: string
      memberLastName:
        type: string
      tourId:
        type: integer
      touristUsername:
        type: string
    type: object
  models.Location:
    properties:
      address:
        type: string
      latitude:
        type: number
      locationId:
        type: integer
      longitude:
        type: number
      name:
        type: string
      type:
        type: string
    type: object
  models.LocationRequest:
    properties:
      address:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      type:
        type: string
    type: object
  models.Tour:
    properties:
      agencyUsername:
        type: string
      createdTimestamp:
        type: string
      description:
        type: string
      endDate:
        type: string
      maxMemberCount:
        type: integer
      memberCount:
        type: integer
      name:
        type: string
      overviewLocation:
        type: string
      price:
        type: number
      refundDueDate:
        type: string
      startDate:
        type: string
      status:
        type: string
      tourId:
        type: integer
    type: object
  models.TourActivityLocation:
    properties:
      activity:
        items:
          $ref: "#/definitions/models.ActivityResponse"
        type: array
      agencyUsername:
        type: string
      createdTimestamp:
        type: string
      description:
        type: string
      endDate:
        type: string
      maxMemberCount:
        type: integer
      memberCount:
        type: integer
      name:
        type: string
      overviewLocation:
        type: string
      price:
        type: number
      refundDueDate:
        type: string
      startDate:
        type: string
      status:
        type: string
      tourId:
        type: integer
    type: object
  models.TourRequest:
    properties:
      activities:
        items:
          $ref: "#/definitions/models.ActivityRequest"
        type: array
      description:
        type: string
      endDate:
        type: string
      maxMemberCount:
        type: integer
      name:
        type: string
      overviewLocation:
        type: string
      price:
        type: number
      refundDueDate:
        type: string
      startDate:
        type: string
    type: object
  models.User:
    properties:
      createdTime:
        type: string
      email:
        type: string
      image:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /hello:
    get:
      description: Just reply Hello World!
      operationId: HelloWorld
      produces:
        - application/json
      responses:
        "200":
          description: Hello World!
          schema:
            type: string
      summary: Hello World
  /joinings:
    get:
      description: Get all joinings
      operationId: GetAllJoinings
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/models.Joining"
            type: array
      summary: Get all joinings
      tags:
        - joinings
    post:
      consumes:
        - application/json
      description: Join tour
      operationId: JoinTour
      parameters:
        - description: Join tour request
          in: body
          name: joinTourRequest
          required: true
          schema:
            $ref: "#/definitions/models.JoinTourRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.Joining"
      summary: Join tour
      tags:
        - joinings
  /tours:
    get:
      description: Get all tours
      operationId: GetAllTours
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/models.Tour"
            type: array
      summary: Get all tours
      tags:
        - tours
    post:
      consumes:
        - application/json
      description: Create a tour with the input JSON data
      operationId: CreateTour
      parameters:
        - description: Tour
          in: body
          name: tour
          required: true
          schema:
            $ref: "#/definitions/models.TourRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.Tour"
      summary: Create a tour
      tags:
        - tours
  /tours/{id}:
    get:
      description: Get tour by id
      operationId: GetTourByID
      parameters:
        - description: Tour ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.TourActivityLocation"
      summary: Get tour by id
      tags:
        - tours
  /tours/{tourId}:
    delete:
      description: Delete a tour
      operationId: DeleteTour
      parameters:
        - description: Tour ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete a tour
      tags:
        - tours
    put:
      consumes:
        - application/json
      description: Update a tour with the input JSON data
      operationId: UpdateTour
      parameters:
        - description: Tour ID
          in: path
          name: id
          required: true
          type: integer
        - description: Tour
          in: body
          name: tour
          required: true
          schema:
            $ref: "#/definitions/models.Tour"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.Tour"
      summary: Update a tour
      tags:
        - tours
  /tours/filter:
    get:
      description: Filter tours
      operationId: FilterTours
      parameters:
        - description: Name
          in: query
          name: name
          type: string
        - description: Start date
          in: query
          name: startDate
          type: string
        - description: End date
          in: query
          name: endDate
          type: string
        - description: Overview location
          in: query
          name: overviewLocation
          type: string
        - description: Member count from
          in: query
          name: memberCountFrom
          type: string
        - description: Member count to
          in: query
          name: memberCountTo
          type: string
        - description: Price from
          in: query
          name: priceFrom
          type: string
        - description: Price to
          in: query
          name: priceTo
          type: string
        - description: Limit
          in: query
          name: limit
          type: string
        - description: Offset
          in: query
          name: offset
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/models.Tour"
            type: array
      summary: Filter tours
      tags:
        - tours
  /tours/tourists/{id}:
    get:
      description: Get a tourist by tourId
      operationId: GetTouristByTourId
      parameters:
        - description: Tour ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/models.JoinedMembers"
            type: array
      summary: Get a tourist by tourId
      tags:
        - tours
  /users:
    get:
      description: Get all users
      operationId: GetAllUsers
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/models.User"
            type: array
      summary: Get all users
      tags:
        - users
    post:
      consumes:
        - application/json
      description: Create a user
      operationId: CreateUser
      parameters:
        - description: User
          in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/models.User"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.User"
      summary: Create a user
      tags:
        - users
  /users/{username}:
    delete:
      description: Delete a user
      operationId: DeleteUser
      parameters:
        - description: Username
          in: path
          name: username
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: User deleted
          schema:
            type: string
      summary: Delete a user
      tags:
        - users
    get:
      description: Get user by username
      operationId: GetUserByUsername
      parameters:
        - description: Username
          in: path
          name: username
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.User"
      summary: Get user by username
      tags:
        - users
    put:
      consumes:
        - application/json
      description: Update a user
      operationId: UpdateUser
      parameters:
        - description: Username
          in: path
          name: username
          required: true
          type: string
        - description: User
          in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/models.User"
      produces:
        - application/json
      responses:
        "200":
          description: User updated
          schema:
            type: string
      summary: Update a user
      tags:
        - users
swagger: "2.0"
