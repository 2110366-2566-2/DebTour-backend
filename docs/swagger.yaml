definitions:
  models.Joining:
    properties:
      memberAge:
        type: integer
      memberFirstName:
        type: string
      memberLastName:
        type: string
      tourId:
        type: integer
      touristUsername:
        type: string
    type: object
  models.Tour:
    properties:
      agencyUsername:
        type: string
      createdTimestamp:
        type: string
      description:
        type: string
      endDate:
        type: string
      maxMemberCount:
        type: integer
      memberCount:
        type: integer
      name:
        type: string
      overviewLocation:
        type: string
      price:
        type: number
      refundDueDate:
        type: string
      startDate:
        type: string
      status:
        type: string
      tourId:
        type: integer
    type: object
  models.User:
    properties:
      createdTime:
        type: string
      email:
        type: string
      image:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /hello:
    get:
      description: Just reply Hello World!
      operationId: HelloWorld
      produces:
      - application/json
      responses:
        "200":
          description: Hello World!
          schema:
            type: string
      summary: Hello World
  /joinings:
    get:
      description: Get all joinings
      operationId: GetAllJoinings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Joining'
            type: array
      summary: Get all joinings
  /joinings/join-tour:
    post:
      consumes:
      - application/json
      description: Join tour
      operationId: JoinTour
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Joining'
      summary: Join tour
  /tours/{id}:
    get:
      description: Get tour by id
      operationId: GetTourByID
      parameters:
      - description: Tour ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tour'
      summary: Get tour by id
  /tours/filter:
    get:
      description: Filter tours
      operationId: FilterTours
      parameters:
      - description: Name
        in: query
        name: name
        type: string
      - description: Start date
        in: query
        name: startDate
        type: string
      - description: End date
        in: query
        name: endDate
        type: string
      - description: Overview location
        in: query
        name: overviewLocation
        type: string
      - description: Member count from
        in: query
        name: memberCountFrom
        type: string
      - description: Member count to
        in: query
        name: memberCountTo
        type: string
      - description: Price from
        in: query
        name: priceFrom
        type: string
      - description: Price to
        in: query
        name: priceTo
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Offset
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tour'
            type: array
      summary: Filter tours
  /users:
    get:
      description: Get all users
      operationId: GetAllUsers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get all users
    post:
      consumes:
      - application/json
      description: Create a user
      operationId: CreateUser
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Create a user
  /users/{username}:
    delete:
      description: Delete a user
      operationId: DeleteUser
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            type: string
      summary: Delete a user
    get:
      description: Get user by username
      operationId: GetUserByUsername
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user by username
    put:
      consumes:
      - application/json
      description: Update a user
      operationId: UpdateUser
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
          schema:
            type: string
      summary: Update a user
swagger: "2.0"
